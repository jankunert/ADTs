package Stack;

public class CharArrayStack implements CharStack {
	public char[] daten;
	private int top= 0;//der nächste freie Platz
	/**
	 * @author jan.kunert
	 * @version 1.0
	 */

	public CharArrayStack()
	{
		daten = new char[10];
		
	}
	/**
	 * Liefert zurück, ob der Keller Leer ist
	 * 
	 *  @return true, wenn das Array leer ist.
	 */
	
	public boolean isEmpty() {
		if (top==0){
		return true;}
		else;return false;
	}
	/**
	 * Liefert zurück, ob der Keller voll ist
	 * 
	 *  @return true, wenn das Array voll ist.
	 */
	
	public boolean isFull() {
		if (top==daten.length+1){
		return true;}
		else;return false;
	}
	/**
	 * Liefert das oberste Keller-Element zurück 
	 * 
	 * @return das oberste Daten-Element zurück
	 */
	

	public char top() {
		if (isEmpty()){
			throw new RuntimeException("daten is leer du huan");}
		
		return daten[top-1];
	}
	/**
	* Liefert die Anzahl an belegten Plätzen
	*
	* @return die anzahl an belgten Plätzen
	*/
	public int size()
	{
		return top;
	}
	/**
	 * Legt ein Element auf den Stapel.
	 */
	public void push(char inhalt) {
		if (top == daten.length){
			throw new RuntimeException("daten is voll du huan");}
		daten[top] = inhalt;top++;

	}
	/**
	 Liefert das Oberste Keller-Element und gibt es danach zur Überschreibung frei.
	 
	 @return  das oberste Keller-Element
	 	 */
	public char pop() {
		top--;
		if (top==-1){
			throw new RuntimeException("i kan nimmer poppen weil daten leer");
		}
		return daten[top];
		
	}
	/**
	* Wandelt den kompletten Kellerinhalt in eine Zeichenkette um.
	*
	*@return den gesamten Inhalt als String.
	*/
	public String toString(){
		
		String s = "";
		for(int i = 0; i<=top-1;i++){
			s+=daten[i];
			
		}
		
		
		return s;
	}
}
